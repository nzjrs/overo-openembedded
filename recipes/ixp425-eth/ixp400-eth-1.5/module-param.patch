 ixp400_eth.c |   32 ++++++++++++++++++++++++++++++++
 1 files changed, 32 insertions(+)

Index: ixp400_eth/ixp400_eth.c
===================================================================
--- ixp400_eth.orig/ixp400_eth.c
+++ ixp400_eth/ixp400_eth.c
@@ -142,22 +142,54 @@
 
 static int datapath_poll = 1;     /* default : rx/tx polling, not interrupt driven*/
 
+#if LINUX_VERSION_CODE <= KERNEL_VERSION(2,6,16)
 MODULE_PARM(ixp400_netdev_max_backlog, "i");
+#else
+module_param(ixp400_netdev_max_backlog, int, 0644);
+#endif
 MODULE_PARM_DESC(ixp400_netdev_max_backlog, "Should be set to the value of /proc/sys/net/core/netdev_max_backlog (perf affecting)");
+#if LINUX_VERSION_CODE <= KERNEL_VERSION(2,6,16)
 MODULE_PARM(datapath_poll, "i");
+#else
+module_param(datapath_poll, int, 0644);
+#endif
 MODULE_PARM_DESC(datapath_poll, "If non-zero, use polling method for datapath instead of interrupts");
 #endif /* CONFIG_IXP400_NAPI */
+#if LINUX_VERSION_CODE <= KERNEL_VERSION(2,6,16)
 MODULE_PARM(npe_learning, "i");
+#else
+module_param(npe_learning, int, 0644);
+#endif
 MODULE_PARM_DESC(npe_learning, "If non-zero, NPE MAC Address Learning & Filtering feature will be enabled");
+#if LINUX_VERSION_CODE <= KERNEL_VERSION(2,6,16)
 MODULE_PARM(log_level, "i");
+#else
+module_param(log_level, int, 0644);
+#endif
 MODULE_PARM_DESC(log_level, "Set log level: 0 - None, 1 - Verbose, 2 - Debug");
+#if LINUX_VERSION_CODE <= KERNEL_VERSION(2,6,16)
 MODULE_PARM(no_ixp400_sw_init, "i");
+#else
+module_param(no_ixp400_sw_init, int, 0644);
+#endif
 MODULE_PARM_DESC(no_ixp400_sw_init, "If non-zero, do not initialise Intel IXP400 Software Release core components");
+#if LINUX_VERSION_CODE <= KERNEL_VERSION(2,6,16)
 MODULE_PARM(no_phy_scan, "i");
+#else
+module_param(no_phy_scan, int, 0644);
+#endif
 MODULE_PARM_DESC(no_phy_scan, "If non-zero, use hard-coded phy addresses");
+#if LINUX_VERSION_CODE <= KERNEL_VERSION(2,6,16)
 MODULE_PARM(phy_reset, "i");
+#else
+module_param(phy_reset, int, 0644);
+#endif
 MODULE_PARM_DESC(phy_reset, "If non-zero, reset the phys");
+#if LINUX_VERSION_CODE <= KERNEL_VERSION(2,6,16)
 MODULE_PARM(dev_max_count, "i");
+#else
+module_param(dev_max_count, int, 0644);
+#endif
 MODULE_PARM_DESC(dev_max_count, "Number of devices to initialize");
 
 /* boolean values for PHY link speed, duplex, and autonegotiation */
